{"version":3,"file":"module.js","mappings":"gHAAAA,EAAOC,QAAUC,C,UCAjBF,EAAOC,QAAUE,C,UCAjBH,EAAOC,QAAUG,C,UCAjBJ,EAAOC,QAAUI,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaR,QAGrB,IAAID,EAASM,EAAyBE,GAAY,CAGjDP,QAAS,CAAC,GAOX,OAHAU,EAAoBH,GAAUR,EAAQA,EAAOC,QAASM,GAG/CP,EAAOC,OACf,CCrBAM,EAAoBK,EAAKZ,IACxB,IAAIa,EAASb,GAAUA,EAAOc,WAC7B,IAAOd,EAAiB,QACxB,IAAM,EAEP,OADAO,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACd,EAASgB,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAElB,EAASiB,IAC5EE,OAAOC,eAAepB,EAASiB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK5B,IACH,oBAAX6B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAepB,EAAS6B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAepB,EAAS,aAAc,CAAE+B,OAAO,GAAO,E,wECEvD,MAAMC,EAAkC,CAC7CC,UAAY,6BCHP,MAAMC,UAAmBC,EAAAA,sBAK9BC,gBAAgBC,GACd,OAAOL,CACT,CANAM,YAAYC,GACVC,MAAMD,EACR,E,w8BCFK,MAAME,EAAS,IAAIC,EAAAA,iBAA2DR,GAClFS,iBCAI,SAAsBC,GAC3B,MAAM,gBAAEC,EAAe,QAAEC,GAAYF,GAiC/B,SAAEG,EAAQ,iBAAEC,GAAqBF,EACjCG,EAAkBH,EAAQG,gBAAkB,CAAC,EAEnD,OACE,kBAACC,MAAAA,CAAIC,UAAU,iBACb,kBAACC,EAAAA,YAAWA,CAACC,MAAM,OAAOC,WAAY,IACpC,kBAACC,EAAAA,MAAKA,CACJC,SAvCcC,IACpB,MAAMV,EAAW,OACZD,EAAQC,UAAQ,CACnBW,KAAMD,EAAME,OAAO5B,QAErBc,EAAgB,OAAKC,GAAAA,CAASC,a,EAmCxBhB,MAAOgB,EAASW,MAAQ,GACxBE,YAAY,kCACZC,MAAO,MAGX,kBAACT,EAAAA,YAAWA,CAACC,MAAM,UAAUC,WAAY,IACvC,kBAACQ,EAAAA,YAAWA,CACVC,aAAef,GAAoBA,EAAiBgB,OACpDjC,MAAOkB,EAAee,QAAU,GAChCJ,YAAY,mCACZC,MAAO,GACPI,QAjCc,KACpBpB,EAAgB,OACXC,GAAAA,CACHE,iBAAkB,OACbF,EAAQE,kBAAgB,CAC3BgB,QAAQ,IAEVf,eAAgB,OACXH,EAAQG,gBAAc,CACzBe,OAAQ,O,EAyBNR,SA3CgBC,IACtBZ,EAAgB,OACXC,GAAAA,CACHG,eAAgB,CACde,OAAQP,EAAME,OAAO5B,S,KA4C7B,ID1DGmC,gBEAI,UAAqB,MAAEC,EAAK,SAAEX,EAAQ,WAAEY,IAC7C,MAWM,UAAEnC,GAAckC,EAKtB,OACE,kBAACjB,MAAAA,CAAIC,UAAU,WAEb,kBAACC,EAAAA,YAAWA,CAACC,MAAM,aAAaC,WAAY,GAAIe,QAAQ,cACtD,kBAACd,EAAAA,MAAKA,CAACC,SApBcC,I,QACzBD,G,wUAAS,IAAKW,G,WAAAA,CAAOlC,UAAWwB,EAAME,OAAO5B,Q,mVAmBLA,MAAOE,GAAa,MAIhE,G","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataQuery, DataSourceJsonData } from '@grafana/data';\r\n\r\nexport interface MyQuery extends DataQuery {\r\n  queryText?: string;\r\n // constant: number;\r\n}\r\n\r\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\r\n  queryText : \"basysafe.initiator.status\",\r\n};\r\n\r\n/**\r\n * These are options configured for each DataSource instance\r\n */\r\nexport interface MyDataSourceOptions extends DataSourceJsonData {\r\n  path?: string;\r\n}\r\n\r\n/**\r\n * Value that is used in the backend, but never sent over HTTP to the frontend\r\n */\r\nexport interface MySecureJsonData {\r\n  apiKey?: string;\r\n}\r\n","import { DataSourceInstanceSettings, CoreApp } from '@grafana/data';\r\nimport { DataSourceWithBackend } from '@grafana/runtime';\r\n\r\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY } from './types';\r\n\r\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\r\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\r\n    super(instanceSettings);\r\n  }\r\n\r\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\r\n    return DEFAULT_QUERY\r\n  }\r\n}\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { DataSource } from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport { MyQuery, MyDataSourceOptions } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor);\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\r\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\r\n\r\nexport function ConfigEditor(props: Props) {\r\n  const { onOptionsChange, options } = props;\r\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      path: event.target.value,\r\n    };\r\n    onOptionsChange({ ...options, jsonData });\r\n  };\r\n\r\n  // Secure field (only sent to the backend)\r\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonData: {\r\n        apiKey: event.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onResetAPIKey = () => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonFields: {\r\n        ...options.secureJsonFields,\r\n        apiKey: false,\r\n      },\r\n      secureJsonData: {\r\n        ...options.secureJsonData,\r\n        apiKey: '',\r\n      },\r\n    });\r\n  };\r\n\r\n  const { jsonData, secureJsonFields } = options;\r\n  const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\r\n\r\n  return (\r\n    <div className=\"gf-form-group\">\r\n      <InlineField label=\"Path\" labelWidth={12}>\r\n        <Input\r\n          onChange={onPathChange}\r\n          value={jsonData.path || ''}\r\n          placeholder=\"json field returned to frontend\"\r\n          width={40}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"API Key\" labelWidth={12}>\r\n        <SecretInput\r\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\r\n          value={secureJsonData.apiKey || ''}\r\n          placeholder=\"secure json field (backend only)\"\r\n          width={40}\r\n          onReset={onResetAPIKey}\r\n          onChange={onAPIKeyChange}\r\n        />\r\n      </InlineField>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input } from '@grafana/ui';\r\nimport { QueryEditorProps } from '@grafana/data';\r\nimport { DataSource } from '../datasource';\r\nimport { MyDataSourceOptions, MyQuery } from '../types';\r\n\r\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\r\n\r\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\r\n  const onQueryTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...query, queryText: event.target.value });\r\n  };\r\n\r\n  // const onConstantChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n  //   onChange({ ...query, constant: parseFloat(event.target.value) });\r\n  //   // executes the query\r\n  //   onRunQuery();\r\n  // };\r\n\r\n  //const { queryText, constant } = query;\r\n  const { queryText } = query;\r\n//   <InlineField label=\"Constant\">\r\n//   <Input onChange={onConstantChange} value={constant} width={8} type=\"number\" step=\"0.1\" />\r\n// </InlineField>\r\n\r\n  return (\r\n    <div className=\"gf-form\">\r\n     \r\n      <InlineField label=\"Topic Name\" labelWidth={16} tooltip=\"Topic Name\">\r\n        <Input onChange={onQueryTextChange} value={queryText || ''} />\r\n      </InlineField>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DEFAULT_QUERY","queryText","DataSource","DataSourceWithBackend","getDefaultQuery","_","constructor","instanceSettings","super","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","options","jsonData","secureJsonFields","secureJsonData","div","className","InlineField","label","labelWidth","Input","onChange","event","path","target","placeholder","width","SecretInput","isConfigured","apiKey","onReset","setQueryEditor","query","onRunQuery","tooltip"],"sourceRoot":""}