version: '3.6'

networks:
  communication:
    name: basys-communication
    internal: false
  proxy:
    name: basys-proxy
    external: true

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  emqx-data:
    driver: local

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper
    container_name: zookeeper
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data:Z
      - zookeeper-log:/var/lib/zookeeper/log:Z
    ports:
      - "2181:2181"
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - communication

  kafka:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${EXTERNAL_HOSTNAME}:9092,
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - communication

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    restart: always
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - communication

# connect:
#   image: cnfldemos/kafka-connect-datagen:0.5.0-6.2.1
#   hostname: connect
#   container_name: connect
#   depends_on:
#     - kafka
#     - schema-registry
#   ports:
#     - "8083:8083"
#   restart: always
#   environment:
#     CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
#     CONNECT_REST_ADVERTISED_HOST_NAME: connect
#     CONNECT_REST_PORT: 8083
#     CONNECT_GROUP_ID: compose-connect-group
#     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
#     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
#     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
#
# ksqldb-server:
#   image: confluentinc/cp-ksqldb-server:6.2.1
#   hostname: ksqldb-server
#   container_name: ksqldb-server
#   depends_on:
#     - kafka
#     - connect
#   ports:
#     - "8088:8088"
#   restart: always
#   environment:
#     KSQL_CONFIG_DIR: "/etc/ksql"
#     KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
#     KSQL_HOST_NAME: ksqldb-server
#     KSQL_LISTENERS: "http://0.0.0.0:8088"
#     KSQL_CACHE_MAX_BYTES_BUFFERING: 0
#     KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#     KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
#     KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
#     KSQL_KSQL_CONNECT_URL: "http://connect:8083"
#     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
#     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
#     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
#
# ksqldb-cli:
#   image: confluentinc/cp-ksqldb-cli:6.2.1
#   container_name: ksqldb-cli
#   restart: always
#   depends_on:
#     - kafka
#     - connect
#     - ksqldb-server
#   entrypoint: /bin/sh
#   tty: true
#
# ksql-datagen:
#   image: confluentinc/ksqldb-examples:6.2.1
#   hostname: ksql-datagen
#   container_name: ksql-datagen
#   restart: always
#   depends_on:
#     - ksqldb-server
#     - kafka
#     - schema-registry
#     - connect
#   command: "bash -c 'echo Waiting for Kafka to be ready... && \
#                      cub kafka-ready -b kafka:29092 1 40 && \
#                      echo Waiting for Confluent Schema Registry to be ready... && \
#                      cub sr-ready schema-registry 8081 40 && \
#                      echo Waiting a few seconds for topic creation to finish... && \
#                      sleep 11 && \
#                      tail -f /dev/null'"
#   environment:
#     KSQL_CONFIG_DIR: "/etc/ksql"
#     STREAMS_BOOTSTRAP_SERVERS: kafka:29092
#     STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
#     STREAMS_SCHEMA_REGISTRY_PORT: 8081
#
# rest-proxy:
#   image: confluentinc/cp-kafka-rest:6.2.1
#   depends_on:
#     - kafka
#     - schema-registry
#   ports:
#     - 8082:8082
#   restart: always
#   hostname: rest-proxy
#   container_name: rest-proxy
#   environment:
#     KAFKA_REST_HOST_NAME: rest-proxy
#     KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
#     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
#     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq:dev
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:29092"
              schema-registry:
                url: "http://schema-registry:8081"
#              connect:
#                - name: "connect"
#                  url: "http://connect:8083"
      VIRTUAL_HOST: akhq.${EXTERNAL_HOSTNAME}
      VIRTUAL_PORT: 8080
    ports:
      - 8086:8080
    restart: always
    depends_on:
      - kafka
      - schema-registry
    networks:
      - communication
      - proxy

  emqx:
    container_name: emqx
    image: emqx/emqx:4.3.10
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=127.0.0.1
      - EMQX_ADMIN_PASSWORD=test123
      - EMQX_LOADED_PLUGINS="emqx_recon,emqx_retainer,emqx_management,emqx_dashboard,emqx_auth_clientid"
      - EMQX_RETAINER__STORAGE_TYPE=disc
      - VIRTUAL_HOST=emqx.${EXTERNAL_HOSTNAME}
      - VIRTUAL_PORT=18083
    volumes:
      - emqx-data:/opt/emqx/data
    ports:
      - '1883:1883'
      - '8883:8883'
      - '8083:8083'
      - '8084:8084'
      - '18083:18083'
    restart: always
    networks:
      - communication
      - proxy
