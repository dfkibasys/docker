version: '3.6'

networks:
  basys:
    internal: false

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  emqx-data:
    driver: local
    
services:    
  
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: always
    ports:
      - "9090:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - basys
  
  zookeeper:
    image: zookeeper:3.6
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"  
    volumes:
      - ./data/zookeeper/conf/zoo.cfg:/conf/zoo.cfg:Z  
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log   
    networks:
      - basys

  zoonavigator_web:
    image: elkozmon/zoonavigator-web:latest
    container_name: zoonavigator-web
    ports:
     - "9091:8000"
    environment:
      API_HOST: "zoonavigator_api"
      API_PORT: 9000
    links:
     - zoonavigator_api
    depends_on:
     - zoonavigator_api
    restart: always
    networks:
      - basys
  
  zoonavigator_api:
    image: elkozmon/zoonavigator-api:latest
    container_name: zoonavigator-api
    environment:
      SERVER_HTTP_PORT: 9000
    restart: always
    networks:
      - basys

  activemq:
    image: rmohr/activemq:latest
    container_name: activemq
    ports:
      - "61616:61616"
      - "8161:8161"
    restart: always
    networks:
      - basys
  
  #mqtt-broker:
  #  image: eclipse-mosquitto:latest
  #  container_name: mqtt-broker
  #  ports:
  #    - "1883:1883"
  #    - "9001:9001"    
  #  volumes:
  #    - ./data/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:Z
  #  restart: always
  #  networks:
  #    - basys
  emqx:
    container_name: emqx
    image: emqx/emqx:latest
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=127.0.0.1
      - EMQX_ADMIN_PASSWORD=test123
      - EMQX_LOADED_PLUGINS="emqx_recon,emqx_retainer,emqx_management,emqx_dashboard,emqx_auth_clientid"
      - EMQX_RETAINER__STORAGE_TYPE=disc
    volumes:
      - emqx-data:/opt/emqx/data
    ports:
      - '1883:1883'
      - '8083:8083'
      - '8084:8084'
      - '8085:8080'
      - '18083:18083'
    restart: always
    networks:
      - basys

  camunda:
    image: camunda/camunda-bpm-platform:latest
    container_name: camunda
    ports:
        - "9080:8080"
    restart: always
    networks:
      - basys

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_NUM_PARTITIONS: 12
#      KAFKA_COMPRESSION_TYPE: gzip
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${HOSTNAME}:9092
#      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
#      KAFKA_JMX_PORT: 9091
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    links:
      - zookeeper
    restart: always
    networks:
      - basys
  
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://${HOSTNAME}:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
    restart: always
    networks:
      - basys

  connect:
    image: confluentinc/cp-kafka-connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${HOSTNAME}:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_TOPIC: __connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: __connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: __connect-status
      CONNECT_GROUP_ID: "kafka-connect"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'
    restart: always
    networks:
      - basys

  kafkahq:
    image: tchiotludo/kafkahq:latest
    container_name: kafkahq
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "${HOSTNAME}:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                url: "http://connect:8083"
    ports:
      - 9093:8080
    links:
      - kafka
      - schema-registry
    restart: always
    networks:
      - basys

  jobmanager:
    image: flink:latest
    container_name: jobmanager
    expose:
      - "6123"
    ports:
      - "9094:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    restart: always
    networks:
      - basys

  taskmanager:
    image: flink:latest
    container_name: taskmanager
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - "jobmanager:jobmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    restart: always
    networks:
      - basys
