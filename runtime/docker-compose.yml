version: '3.6'

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
    
services:    
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: always
    ports:
      - "9090:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"  
    volumes:
      - ./data/zookeeper/conf/zoo.cfg:/conf/zoo.cfg:Z  
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log   
#  zookeeper:
#    image: confluentinc/cp-zookeeper
#    container_name: zookeeper
#    volumes:
#      - zookeeper-data:/var/lib/zookeeper/data
#      - zookeeper-log:/var/lib/zookeeper/log
#    ports:
#      - "2181:2181"  
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#    restart: always
  zoonavigator_web:
    image: elkozmon/zoonavigator-web:latest
    container_name: zoonavigator-web
    ports:
     - "9091:8000"
    environment:
      API_HOST: "zoonavigator_api"
      API_PORT: 9000
    links:
     - zoonavigator_api
    depends_on:
     - zoonavigator_api
    restart: always
  zoonavigator_api:
    image: elkozmon/zoonavigator-api:latest
    container_name: zoonavigator-api
    environment:
      SERVER_HTTP_PORT: 9000
    restart: always
#  kafka:
#    image: bitnami/kafka:2
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes 
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${HOSTNAME}:9092
#    restart: always
  activemq:
    image: rmohr/activemq:latest
    container_name: activemq
    ports:
      - "61616:61616"
      - "8161:8161"
    restart: always
  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: mqtt-broker
    ports:
      - "1883:1883"
      - "9001:9001"    
    volumes:
      - ./data/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:Z
    restart: always
  camunda:
    image: camunda/camunda-bpm-platform:latest
    container_name: camunda
    ports:
        - "9080:8080"
    restart: always
  component-dashboard:
    image: dfkibasys/component-dashboard:latest
    container_name: component-dashboard
    ports:
        - "9081:8080"
    environment:
      BASYS_REST_URL: http://localhost:8080
      MQTT_BROKER_IP: ${HOSTNAME}
      MQTT_BROKER_PORT: 9001
      CAMUNDA_REST_URL: http://${HOSTNAME}:9080
    restart: always
  process-dashboard:
    image: dfkibasys/process-dashboard:latest
    container_name: process-dashboard
    command: --camunda.rest.base.url=http://camunda:8080/engine-rest/engine/default
    ports:
        - "9082:8000"
    links:
        - camunda
    restart: always
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_NUM_PARTITIONS: 12
#      KAFKA_COMPRESSION_TYPE: gzip
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${HOSTNAME}:9092
#      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
#      KAFKA_JMX_PORT: 9091
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    links:
      - zookeeper
    restart: always
  schema-registry:
    image: confluentinc/cp-schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://${HOSTNAME}:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
    restart: always
  connect:
    image: confluentinc/cp-kafka-connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${HOSTNAME}:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_TOPIC: __connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: __connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: __connect-status
      CONNECT_GROUP_ID: "kafka-connect"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'
    restart: always
  kafkahq:
    image: tchiotludo/kafkahq
    container_name: kafkahq
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "${HOSTNAME}:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                url: "http://connect:8083"
    ports:
      - 9093:8080
    links:
      - kafka
      - schema-registry
    restart: always

  jobmanager:
    image: flink:1.10.0-scala_2.12
    container_name: jobmanager
    expose:
      - "6123"
    ports:
      - "9094:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    restart: always

  taskmanager:
    image: flink:1.10.0-scala_2.12
    container_name: taskmanager
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - "jobmanager:jobmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    restart: always
  
  aas-services:
    image: dfkibasys/aas-services:latest
    container_name: aas-services
    ports:
      - "4999:4999"
      - "5080:5080"
      - "5081:5081"
    links:
      - zookeeper
    volumes:
      - ./data/aas-services/config:/app/config
      - ./data/aas-services/components:/app/components
    command: -zk zookeeper:2181
    environment:
      AAS_HOST_ACCESSIBLE_ENDPOINT: "http://${HOSTNAME}:5081"
    restart: always

  cc-server:
    image: dfkibasys/control-component-server:latest
    container_name: control-component-server
    ports:
      - "5082:5082" #submodel host
      - "12685:12685" #opc-ua
    links:
      - aas-services
    volumes:
      - ./data/cc-server/config:/app/config
      - ./data/cc-server/certs:/app/certs
      - ./data/cc-server/components:/app/components
    command: -r http://aas-services:4999
    environment:
      AAS_HOST_ACCESSIBLE_ENDPOINT: "http://${HOSTNAME}:5082"
    restart: always
  
  service-platform:
    image: dfkibasys/service-platform:latest
    container_name: service-platform
    ports:
      - "5083:5083"
    links:
      - zookeeper
      - activemq
      - mqtt-broker
      - camunda
      - aas-services
      - cc-server
    volumes:
      - ./data/service-platform/config:/app/config
      - ./data/service-platform/components:/app/components
      - ./data/service-platform/processes:/app/processes
      - ./data/service-platform/model:/app/model
    command: -c config/ -zk zookeeper:2181 -r http://aas-services:4999 -cs tcp://activemq:61616
    environment:
      AAS_HOST_ACCESSIBLE_ENDPOINT: "http://${HOSTNAME}:5083"
    restart: always
